/**
 * KusionStack. Copyright (c) 2020-2020 All Rights Reserved.
 */
package io.kusionstack.kcl.psi.impl;

import io.kusionstack.kcl.KCLIcons;
import io.kusionstack.kcl.psi.*;
import com.intellij.icons.AllIcons;
import com.intellij.navigation.ItemPresentation;
import com.intellij.psi.PsiElement;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;

/**
 * Helper classes and utilities can be embedded in the code generated by Grammar-Kit.
 *
 * @author amyxia
 * @version KCLPsiImplUtil: KCLPsiImplUtil.java, v 0.1 2020年09月23日 11:42 上午 amyxia Exp $
 */
public class KCLPsiImplUtil {
    public static @NotNull String getName(KCLSingleName name) {
        return name.getText();
    }

    public static PsiElement setName(KCLSingleName name, @NotNull String newName) {
        // ASTNode schemaNameNode = identifier.getNode().findChildByType(KCLTypes.NAME);
        // todo 应该怎样构建一个新的identifier节点出来
        // if (schemaNameNode != null) {}
        return name;
    }

    public static @NotNull KCLSingleName getNameIdentifier(KCLSingleName name) {
        return name;
    }

    public static KCLNameReference getReference(KCLSingleName name) {
        return new KCLNameReference(name);
    }

    public static @NotNull String getName(KCLSchemaStmt schemaStmt) {
        return schemaStmt.getSingleName().getName();
    }

    public static PsiElement setName(KCLSchemaStmt schemaStmt, @NotNull String newName) {
        return schemaStmt;
    }

    public static @NotNull KCLSingleName getNameIdentifier(KCLSchemaStmt schemaStmt) {
        return schemaStmt.getSingleName();
    }

    public static @Nullable KCLIdentifier getSuperSchema(KCLSchemaStmt schemaStmt) {
        return schemaStmt.getIdentifierList().size() == 0 ? null : schemaStmt.getIdentifierList().get(0);
    }

    public static @NotNull ItemPresentation getPresentation(KCLSchemaStmt schemaStmt) {
        return new ItemPresentation() {
            @Override
            public String getPresentableText() {
                KCLIdentifier superSchema = schemaStmt.getSuperSchema();
                String superSchemaText = superSchema == null ? "" : String.format("(%s)", superSchema.getText());

                KCLSchemaArguments args = schemaStmt.getSchemaArguments();
                String argsText = args == null ? "" : String.format("[%s]", args.getText());

                return String.format("%s%s%s", schemaStmt.getName(), superSchemaText, argsText);
            }

            @Override
            public String getLocationString() {
                return null;
            }

            @Override
            public Icon getIcon(boolean unused) {
                if (schemaStmt.getName().endsWith("Mixin")) {
                    return KCLIcons.MIXIN;
                }
                return KCLIcons.SCHEMA;
            }
        };
    }

    public static @NotNull ItemPresentation getPresentation(KCLSingleName name) {
        return new ItemPresentation() {
            @Override
            public String getPresentableText() {
                return name.getName();
            }

            @Override
            public @Nullable String getLocationString() {
                return null;
            }

            @Override
            public Icon getIcon(boolean unused) {
                return AllIcons.Nodes.Variable;
            }
        };
    }
}