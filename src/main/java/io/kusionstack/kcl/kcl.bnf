{
    parserClass = "io.kusionstack.kcl.parser.KCLParser"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
    implements = "io.kusionstack.kcl.psi.KCLElement"

    psiClassPrefix = "KCL"
    psiImplClassSuffix = "Impl"
    psiPackage = "io.kusionstack.kcl.psi"
    psiImplPackage = "io.kusionstack.kcl.psi.impl"

    elementTypeHolderClass = "io.kusionstack.kcl.psi.KCLTypes"
    elementTypeClass = "io.kusionstack.kcl.psi.KCLElementType"
    tokenTypeClass = "io.kusionstack.kcl.psi.KCLTokenType"

    psiImplUtilClass = "io.kusionstack.kcl.psi.impl.KCLPsiImplUtil"
}

// this grammar is synchronized from https://github.com/KusionStack/KCLVM/blob/main/internal/kclvm_py/kcl/grammar/kcl.lark
// last sync time: 2021.12.9
// Some adjustment is made to suit grammar-kit tool:
// 1. rule assign_stmt: adjust to LL(1) grammar, change "(ASSIGN identifier)* ASSIGN" to "ASSIGN (identifier ASSIGN)*"
// 2. rule ellipsis: add rule ellipsis instead of Token ELLIPSIS("...") to suit flex
// 3. token ANY: remove duplicate ANY_TYPE to suit flex
// 4. rule simple_expr: adjust to LL(1) grammar
// 5. rule primary_expr: adjust to LL(1) grammar, remove left-recursive
// 6. rule operand: adjust sub rule order to avoid miss matching & add rule type_cast_expr
// 7. rule slice_suffix: adjust sub rule order to avoid miss matching
// 8. rule argument: adjust sub rule order to avoid miss matching
// 9. rule type_cast_expr: add this rule since basic type tokens(int, bool, str, float) are separated from NAME, and are treated as keywords.
//    JFlex and lark treat keyword tokens differently. For example, jflex only treats 'str' as 'STRING_TYPE', while lark treats it as both
//    'STRING_TYPE' and 'Name' and will decide which one to use until parsing.
// 10.rule single_name: add this rule to ensure a generated PsiElement so to inspect reference on it

//////////// KCL grammar ////////////
kclFile ::= (NEWLINE | statement)*

statement ::= simple_stmt | compound_stmt
simple_stmt ::= (assign_stmt | unification_stmt | expr_stmt | assert_stmt | type_alias_stmt | import_stmt ) NEWLINE
compound_stmt ::= if_stmt | schema_stmt

//////////// import_stmt ////////////
import_stmt ::= IMPORT dot_name (AS single_name)? {pin=1 recoverWhile=recoverImport}
dot_name ::= (leading_dots identifier) | identifier
leading_dots ::= DOT+
private recoverImport ::= !(NEWLINE)

/////////// assert_stmt ////////////
assert_stmt ::= ASSERT test (COMMA test)?

//////////// if_stmt ////////////
if_stmt ::= IF test COLON execution_block (ELIF test COLON execution_block)* (ELSE COLON execution_block)?
execution_block ::= if_simple_stmt | NEWLINE INDENT schema_init_stmt+ DEDENT
if_simple_stmt ::= (simple_assign_stmt | unification_stmt | expr_stmt | assert_stmt) NEWLINE

//////////// assign_stmt ////////////
assign_stmt ::= identifier [COLON type] ASSIGN (identifier ASSIGN)* test
    | identifier (COMP_PLUS | COMP_MINUS | COMP_MULTIPLY | COMP_DOUBLE_STAR | COMP_DIVIDE
    | COMP_DOUBLE_DIVIDE | COMP_MOD | COMP_AND | COMP_OR | COMP_XOR | COMP_SHIFT_LEFT
    | COMP_SHIFT_RIGHT) test

simple_assign_stmt ::= identifier ASSIGN test
    | identifier (COMP_PLUS | COMP_MINUS | COMP_MULTIPLY | COMP_DOUBLE_STAR | COMP_DIVIDE
    | COMP_DOUBLE_DIVIDE | COMP_MOD | COMP_AND | COMP_OR | COMP_XOR | COMP_SHIFT_LEFT
    | COMP_SHIFT_RIGHT) test

//////////// unification_stmt ////////////
unification_stmt ::= identifier COLON schema_expr

//////////// schema_stmt ////////////
schema_stmt ::= [decorators] (SCHEMA|MIXIN|PROTOCOL) [RELAXED] single_name [LEFT_BRACKETS [schema_arguments] RIGHT_BRACKETS] [LEFT_PARENTHESES identifier (COMMA identifier)* RIGHT_PARENTHESES] [for_mixin_host] COLON NEWLINE [schema_body] {
implements = ["io.kusionstack.kcl.psi.KCLScopeOwner" "io.kusionstack.kcl.psi.KCLNamedElement"]
methods=[getName setName getNameIdentifier getPresentation getSuperSchema]
}
schema_arguments ::= schema_argument (COMMA schema_argument)*
schema_argument ::= single_name [COLON type] [ASSIGN test]
schema_body ::= INDENT (string NEWLINE)* [mixin_stmt] (schema_attribute_stmt|schema_init_stmt|schema_index_signature)* [check_block] DEDENT
schema_attribute_stmt ::= attribute_stmt NEWLINE
attribute_stmt ::= [decorators] (FINAL)? single_name [QUESTION] COLON type [(ASSIGN|COMP_OR) test]
schema_init_stmt ::= if_simple_stmt | if_stmt
schema_index_signature ::= LEFT_BRACKETS [single_name COLON] [ellipsis] basic_type RIGHT_BRACKETS COLON type [ASSIGN test] NEWLINE

for_mixin_host ::= FOR identifier

/////////// decorators ////////////
decorators ::= (AT decorator_expr NEWLINE)+
decorator_expr ::= identifier [call_suffix]

//////////// type ////////////
type ::= type_element (OR type_element)*
type_element ::= schema_type | basic_type | compound_type | literal_type
schema_type ::= identifier
basic_type ::= STRING_TYPE | INT_TYPE | FLOAT_TYPE | BOOL_TYPE | ANY
compound_type ::= list_type | dict_type
list_type ::= LEFT_BRACKETS (type)? RIGHT_BRACKETS
dict_type ::= LEFT_BRACE (type)? COLON (type)? RIGHT_BRACE
literal_type ::= string | number | TRUE | FALSE | NONE

//////////// type alias ////////////
type_alias_stmt ::= K_TYPE single_name ASSIGN type

//////////// check_stmt ////////////
check_block ::= CHECK COLON NEWLINE INDENT check_expr+ DEDENT
check_expr ::= check_test [COMMA primary_expr] NEWLINE
check_test ::= simple_expr [IF simple_expr]

//////////// mixin_stmt ////////////
mixin_stmt ::= MIXIN LEFT_BRACKETS [mixins | multiline_mixins] RIGHT_BRACKETS NEWLINE
multiline_mixins ::= NEWLINE INDENT mixins NEWLINE DEDENT
mixins ::= identifier (COMMA (NEWLINE mixins | identifier))*


//////////// expression_stmt ////////////
expr_stmt ::= testlist_expr
testlist_expr ::= test (COMMA test)*
test ::= if_expr | simple_expr
if_expr ::= simple_expr IF simple_expr ELSE test

simple_expr ::= and_test (K_OR and_test)*

and_test ::= not_test (K_AND not_test)*
not_test ::= K_NOT not_test | comparison
comparison ::= expr (comp_op expr)*
//////////// expr ////////////
expr ::= xor_expr (OR xor_expr)*
xor_expr ::= and_expr (XOR and_expr)*
and_expr ::= shift_expr (AND shift_expr)*
shift_expr ::= arith_expr (( SHIFT_LEFT | SHIFT_RIGHT ) arith_expr)*
arith_expr ::= term (( PLUS | MINUS ) term)*
term ::= factor (( MULTIPLY | DIVIDE | MOD | DOUBLE_DIVIDE ) factor)*
factor ::=  ((PLUS | MINUS | NOT) factor | power)
power ::= primary_expr (DOUBLE_STAR factor)?

primary_expr ::= operand (select_suffix |  call_suffix | slice_suffix)*
operand ::= quant_expr | list_expr | list_comp | config_expr | dict_comp | schema_expr | lambda_expr | LEFT_PARENTHESES test RIGHT_PARENTHESES
| identifier | number | string | constant | type_cast_expr
select_suffix ::= [QUESTION] DOT single_name
call_suffix ::= LEFT_PARENTHESES [arguments [COMMA]] RIGHT_PARENTHESES
slice_suffix ::= [QUESTION] LEFT_BRACKETS ([test] COLON [test] [COLON [test]] | test) RIGHT_BRACKETS
arguments ::= argument (COMMA argument)*
argument ::= single_name ASSIGN test | MULTIPLY test | DOUBLE_STAR test | test
type_cast_expr ::= basic_type LEFT_PARENTHESES test RIGHT_PARENTHESES


//////////// operand ////////////
single_name ::= NAME | multiplier {
implements = ["io.kusionstack.kcl.psi.KCLNamedElement"]
methods = [getName setName getNameIdentifier getPresentation getReference]
}
identifier ::= single_name (DOT single_name)*
quant_expr ::= quant_op [ identifier COMMA ] identifier IN quant_target LEFT_BRACE (simple_expr [IF simple_expr] | NEWLINE INDENT simple_expr [IF simple_expr] NEWLINE DEDENT)? RIGHT_BRACE
quant_target ::= string | identifier | list_expr | list_comp | config_expr | dict_comp
quant_op ::= ALL | ANY | FILTER | MAP
list_expr ::= LEFT_BRACKETS [list_items | NEWLINE INDENT list_items DEDENT] RIGHT_BRACKETS
list_items ::= list_item ((COMMA [NEWLINE] | [NEWLINE]) list_item)* [COMMA] [NEWLINE]
list_item ::= test | star_expr | if_item
list_comp ::= LEFT_BRACKETS (list_item comp_clause+ | NEWLINE INDENT list_item comp_clause+ DEDENT) RIGHT_BRACKETS {
implements = ["io.kusionstack.kcl.psi.KCLScopeOwner"]
}
dict_comp ::= LEFT_BRACE (entry comp_clause+ | NEWLINE INDENT entry comp_clause+ DEDENT) RIGHT_BRACE {
implements = ["io.kusionstack.kcl.psi.KCLScopeOwner"]
}
entry ::= test COLON test | double_star_expr | if_entry
comp_clause ::= FOR loop_variables [COMMA] IN simple_expr [NEWLINE] [IF test [NEWLINE]]
if_entry ::= IF test COLON if_entry_exec_block (ELIF test COLON if_entry_exec_block)* (ELSE COLON if_entry_exec_block)?
if_entry_exec_block ::= (test (COLON | ASSIGN | COMP_PLUS) test | double_star_expr | if_entry) [NEWLINE] | NEWLINE INDENT (test (COLON | ASSIGN | COMP_PLUS) test | double_star_expr | if_entry) ((COMMA [NEWLINE] | [NEWLINE]) (test (COLON | ASSIGN | COMP_PLUS) test | double_star_expr | if_entry))* [COMMA] [NEWLINE] DEDENT
if_item ::= IF test COLON if_item_exec_block (ELIF test COLON if_item_exec_block)* (ELSE COLON if_item_exec_block)?
if_item_exec_block ::= list_item [NEWLINE] | NEWLINE INDENT list_item ((COMMA [NEWLINE] | NEWLINE) list_item)* [COMMA] [NEWLINE] DEDENT

star_expr ::= MULTIPLY primary_expr
double_star_expr ::= DOUBLE_STAR primary_expr
loop_variables ::= primary_expr (COMMA primary_expr)*
schema_expr ::= identifier (LEFT_PARENTHESES [arguments] RIGHT_PARENTHESES)? config_expr
config_expr ::= LEFT_BRACE [config_entries | NEWLINE INDENT config_entries DEDENT] RIGHT_BRACE
config_entries ::= config_entry ((COMMA [NEWLINE] | [NEWLINE]) config_entry)* [COMMA] [NEWLINE]
config_entry ::= test (COLON | ASSIGN | COMP_PLUS) test | double_star_expr | if_entry

//////////// lambda_expr ////////////
lambda_expr ::= LAMBDA [schema_arguments] [RIGHT_ARROW type] LEFT_BRACE [expr_stmt | NEWLINE INDENT schema_init_stmt+ DEDENT] RIGHT_BRACE

//////////// misc ////////////
private number ::= DEC_NUMBER [multiplier] | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER
private multiplier ::= SI_N_L | SI_U_L | SI_M_L | SI_K_L | SI_K | SI_M | SI_G | SI_T | SI_P
    | SI_K_IEC | SI_M_IEC | SI_G_IEC | SI_T_IEC | SI_P_IEC
private string ::= STRING | LONG_STRING
private constant ::= TRUE | FALSE | NONE | UNDEFINED
private comp_op ::= EQUAL_TO | NOT_EQUAL_TO | LESS_THAN | GREATER_THAN | LESS_THAN_OR_EQUAL_TO | GREATER_THAN_OR_EQUAL_TO | IN | K_NOT IN | IS | IS K_NOT | K_NOT
private ellipsis ::= DOT DOT DOT
// keep end of line comment rule, in order to make sure the token type COMMENT is used, therefore the KCLTypes.COMMENT type will be generated.
private end_of_line_comment ::= COMMENT